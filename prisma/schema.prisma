generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int              @id @default(autoincrement())
  email          String           @unique
  name           String
  hashedPassword String
  preferences    UserPreferences?
  TimerSession   TimerSession[]
}

model UserPreferences {
  id               Int  @id @default(autoincrement())
  user             User @relation(fields: [userId], references: [id], onUpdate: Restrict, onDelete: Cascade)
  userId           Int  @unique
  defaultFocusTime Int  @default(1500) // 25 minutes * 60 seconds
  defaultBreakTime Int  @default(300) // 5 minutes * 60 seconds
}

enum TimerMode {
  FOCUS
  BREAK
}

// A timer session is a single run of the timer down to zero. The most recently created timer session is the "active
// timer"; all other timer sessions are either paused or have a completeAt date that's in the past.
model TimerSession {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id], onUpdate: Restrict, onDelete: Cascade)
  userId Int

  mode          TimerMode
  started       Boolean   @default(false) // whether the timer has ever been started
  timeRemaining Int? // remaining time in seconds. present only when the timer is paused or if this session was skipped without having been completed
  completeAt    DateTime? // time at which the timer will complete. present only when the timer is running or has completed
}
